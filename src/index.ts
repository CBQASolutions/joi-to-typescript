import Joi, { AnySchema } from 'joi';
import Path from 'path';
import fs from 'fs';

import { Describe, parseSchema, getAllCustomTypes, typeContentToTs } from './parse';
import { Settings, InterfaceRecord } from './types';

export { Settings };

export const defaultSettings = (settings: Partial<Settings>): Settings => {
  const appSettings = { ...settings } as Settings;

  if (appSettings.defaultToRequired === undefined) {
    appSettings.defaultToRequired = false;
  }
  if (!appSettings.schemaFileSuffix) {
    appSettings.schemaFileSuffix = 'Schema';
  }
  if (appSettings.debug === undefined) {
    appSettings.debug = false;
  }
  if (!appSettings.schemaFileSuffix) {
    appSettings.schemaFileSuffix = 'Schema';
  }
  if (!appSettings.fileHeader) {
    appSettings.fileHeader = `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */`;
  }
  if (appSettings.sortPropertiesByName === undefined) {
    appSettings.sortPropertiesByName = true;
  }
  return appSettings;
};

/**
 * .optional() or .required() if not use settings default
 */
export const getRequired = (details: Describe, settings: Settings): boolean => {
  const presence = details.flags?.presence;

  if (presence === 'optional') {
    return false;
  } else if (presence === 'required') {
    return true;
  } else {
    return settings.defaultToRequired;
  }
};

export const convertSchema = (settings: Settings, joi: AnySchema): InterfaceRecord | undefined => {
  const details = joi.describe() as Describe;
  const name = details?.flags?.label;
  if (!name) {
    throw 'At least one "object" does not have a .label()';
  }

  const parsedSchema = parseSchema(details, settings, false);
  if (parsedSchema) {
    const customTypes = getAllCustomTypes(parsedSchema);
    const content = typeContentToTs(parsedSchema, true);
    return {
      name,
      customTypes,
      content
    };
  }

  return undefined;
};

/**
 * Write interface file
 * @param settings Settings
 * @param schemaFileName Schema File Name
 */
export const writeInterfaceFile = async (settings: Settings, schemaFileName: string): Promise<undefined | string> => {
  const allInterfaceRecords: InterfaceRecord[] = [];

  const fullFilePath = Path.join(settings.schemaDirectory, schemaFileName);
  const schemaFile = await require(fullFilePath);

  for (const iterator in schemaFile) {
    const joiSchema = schemaFile[iterator];

    if (!Joi.isSchema(joiSchema)) {
      continue;
    }
    const interfaceRecord = convertSchema(settings, joiSchema);
    if (interfaceRecord) {
      allInterfaceRecords.push(interfaceRecord);
    }
  }

  if (allInterfaceRecords.length === 0) {
    if (settings.debug) {
      console.log(`${schemaFile} - Skipped - no Joi Schemas found`);
    }
    return;
  }

  if (settings.debug) {
    console.log(`${schemaFileName} - Processing`);
  }

  // Create Type File Name
  const typeFileName = schemaFileName.endsWith(`${settings.schemaFileSuffix}.ts`)
    ? schemaFileName.substring(0, schemaFileName.length - `${settings.schemaFileSuffix}.ts`.length)
    : schemaFileName.replace('.ts', '');

  // Clean up interface records list
  // Sort Interfaces
  const interfacesToBeWritten = allInterfaceRecords.sort(
    (interface1, interface2) => 0 - (interface1.name > interface2.name ? -1 : 1)
  );

  // Write interfaces
  const interfaceContent = interfacesToBeWritten.map(interfaceToBeWritten => interfaceToBeWritten.content);

  // Get imports for the current file
  const externalTypes: string[] = [];
  const allExternalTypes: string[] = [];
  const allCurrentFileInterfaceNames = interfacesToBeWritten.map(interfaceToBeWritten => interfaceToBeWritten.name);

  for (const interfaceToBeWritten of interfacesToBeWritten) {
    for (const customType of interfaceToBeWritten.customTypes) {
      if (!allCurrentFileInterfaceNames.includes(customType)) {
        allExternalTypes.push(customType);
      }
    }
  }
  externalTypes.push(...new Set(allExternalTypes));
  const typeImports: string = externalTypes.length == 0 ? '' : `import { ${externalTypes.join(',\n')} } from '.';\n\n`;

  const fileContent = `${settings.fileHeader}\n\n${typeImports}${interfaceContent.join('\n\n').concat('\n')}`;

  fs.writeFileSync(Path.join(settings.interfaceDirectory, `${typeFileName}.ts`), fileContent);

  return typeFileName;
};

/**
 * Write index.ts file
 * @param settings Settings Object
 * @param fileNamesToExport list of file names that will be added to the index.ts file
 */
export const writeIndexFile = (settings: Settings, fileNamesToExport: string[]): void => {
  const exportLines = fileNamesToExport.map(fileName => `export * from './${fileName}';`);
  const fileContent = `${settings.fileHeader}\n\n${exportLines.join('\n').concat('\n')}`;
  fs.writeFileSync(Path.join(settings.interfaceDirectory, 'index.ts'), fileContent);
};

/**
 * Create interfaces from schemas from a directory
 * @param settings Settings
 */
export const convertFromDirectory = async (settings: Partial<Settings>): Promise<boolean> => {
  const appSettings = defaultSettings(settings);

  // Check and resolve directories
  appSettings.schemaDirectory = Path.resolve(appSettings.schemaDirectory);
  if (!fs.existsSync(appSettings.schemaDirectory)) {
    throw `schemaDirectory "${appSettings.schemaDirectory}" does not exist`;
  }
  appSettings.interfaceDirectory = Path.resolve(appSettings.interfaceDirectory);
  if (!fs.existsSync(appSettings.interfaceDirectory)) {
    fs.mkdirSync(appSettings.interfaceDirectory);
    if (!fs.existsSync(appSettings.interfaceDirectory)) {
      throw `interfaceDirectory "${appSettings.interfaceDirectory}" does not exist`;
    }
  }

  const fileNamesToExport: string[] = [];

  // Load files and get all interface records
  const files = fs.readdirSync(appSettings.schemaDirectory);
  for (const schemaFileName of files) {
    const typeFileName = await writeInterfaceFile(appSettings, schemaFileName);
    if (typeFileName) {
      fileNamesToExport.push(typeFileName);
    }
  }

  // Write index.ts
  writeIndexFile(appSettings, fileNamesToExport);

  return true;
};

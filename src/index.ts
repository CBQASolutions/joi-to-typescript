import Joi, { AnySchema } from 'joi';
import Path from 'path';
import fs from 'fs';

import { getArrayTypeName, Describe, getPropertyType } from './joiHelpers';
import { PropertiesAndInterfaces, Settings, InterfaceRecord, Property } from './types';

export { Settings };

export const defaultSettings = (settings: Partial<Settings>): Settings => {
  const appSettings = { ...settings } as Settings;

  if (!appSettings.defaultToRequired) {
    appSettings.defaultToRequired = false;
  }
  if (!appSettings.schemaFileSuffix) {
    appSettings.schemaFileSuffix = 'Schema';
  }
  if (!appSettings.debug) {
    appSettings.debug = false;
  }
  if (!appSettings.schemaFileSuffix) {
    appSettings.schemaFileSuffix = 'Schema';
  }
  if (!appSettings.fileHeader) {
    appSettings.fileHeader = `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */`;
  }
  return appSettings;
};

/**
 * Is the type a TypeScript type or Custom
 * @param type type name
 */
export const isTypeCustom = (type: string): boolean => {
  switch (type.replace('[]', '')) {
    case 'string':
    case 'boolean':
    case 'number':
    case 'object':
    case 'Date':
      return false;
    default:
      return true;
  }
};

/**
 * Get Interface jsDoc
 */
export const getInterfaceJsDoc = (details: Describe): string => {
  const name = details.flags?.label;
  const description = details.flags?.description;

  // only show description if it has one, no need to double up
  if (description) {
    return `/**
 * ${description}
 */`;
  } else {
    return `/**
 * ${name}
 */`;
  }
};

/**
 * .optional() or .required() if not use settings default
 */
export const getRequired = (details: Describe, settings: Settings): boolean => {
  const presence = details.flags?.presence;

  if (presence === 'optional') {
    return false;
  } else if (presence === 'required') {
    return true;
  } else {
    return settings.defaultToRequired;
  }
};

export const getPropertiesAndInterfaces = (details: Describe, settings: Settings): PropertiesAndInterfaces => {
  const result: PropertiesAndInterfaces = { properties: [], interfaces: [] };

  if (!details.keys) {
    return result;
  }

  for (const [name, key] of Object.entries(details.keys)) {
    const propertyObject = key as Describe;

    const type = getPropertyType(propertyObject);
    if (!type) {
      if (settings.debug) {
        console.log('Property Type not found');
      }
      continue;
    }

    const description = propertyObject.flags?.description;

    const required = getRequired(propertyObject, settings);

    // only show description if it has one, no need to double up
    const propertyJsDoc = `  /**
   * ${description ? description : name}
   */`;

    const content = `${propertyJsDoc}
  ${name}${required ? '' : '?'}: ${type.typeName};`;
    const property: Property = {
      name,
      type: type.typeName,
      content,
      customType: isTypeCustom(type.baseTypeName) ? type.baseTypeName : undefined
    };

    result.properties.push(property);
  }

  // Sort Properties
  result.properties = result.properties.sort((property1, property2) => 0 - (property1.name > property2.name ? -1 : 1));

  return result;
};

export const convertSchema = (settings: Settings, joi: AnySchema): InterfaceRecord[] => {
  const types: InterfaceRecord[] = [];

  const details = joi.describe() as Describe;

  const name = details?.flags?.label;
  if (!name) {
    throw 'At least one "object" does not have a .label()';
  }

  if (details.type === 'array') {
    const arrayTypeName = getArrayTypeName(details);
    if (!arrayTypeName) {
      throw `Array items do not have a .label() for '${name}'`;
    }
    const isCustom = isTypeCustom(arrayTypeName);

    const customTypes: string[] = isCustom ? [arrayTypeName] : [];

    types.push({
      name,
      customTypes,
      content: `${getInterfaceJsDoc(details)}
export type ${name} = ${arrayTypeName}[];`
    });
  }

  if (details.type === 'object') {
    const propertiesAndInterfaces = getPropertiesAndInterfaces(details, settings);

    // get all the custom types on properties
    const customTypes: string[] = propertiesAndInterfaces.properties
      .filter(property => property.customType)
      .map(property => property.customType) as string[];

    types.push({
      name,
      customTypes,
      content: `${getInterfaceJsDoc(details)}
export interface ${name} {
${propertiesAndInterfaces.properties.map(p => p.content).join(`\n`)}
}`
    });
  }

  return types;
};

/**
 * Write interface file
 * @param settings Settings
 * @param schemaFileName Schema File Name
 */
export const writeInterfaceFile = async (settings: Settings, schemaFileName: string): Promise<undefined | string> => {
  const allInterfaceRecords: InterfaceRecord[] = [];

  const fullFilePath = Path.join(settings.schemaDirectory, schemaFileName);
  const schemaFile = await require(fullFilePath);

  for (const iterator in schemaFile) {
    const joiSchema = schemaFile[iterator];

    if (!Joi.isSchema(joiSchema)) {
      continue;
    }
    const interfaceRecords = convertSchema(settings, joiSchema);
    allInterfaceRecords.push(...interfaceRecords);
  }

  if (allInterfaceRecords.length === 0) {
    if (settings.debug) {
      console.log(`${schemaFile} - Skipped - no Joi Schemas found`);
    }
    return;
  }

  if (settings.debug) {
    console.log(`${schemaFileName} - Processing`);
  }

  // Create Type File Name
  const typeFileName = schemaFileName.endsWith(`${settings.schemaFileSuffix}.ts`)
    ? schemaFileName.substring(0, schemaFileName.length - `${settings.schemaFileSuffix}.ts`.length)
    : schemaFileName.replace('.ts', '');

  // Clean up interface records list
  // Sort Interfaces
  const interfacesToBeWritten = allInterfaceRecords.sort(
    (interface1, interface2) => 0 - (interface1.name > interface2.name ? -1 : 1)
  );

  // Write interfaces
  const interfaceContent = interfacesToBeWritten.map(interfaceToBeWritten => interfaceToBeWritten.content);

  // Get imports for the current file
  const externalTypes: string[] = [];
  const allExternalTypes: string[] = [];
  const allCurentFileInterfaceNames = interfacesToBeWritten.map(interfaceToBeWritten => interfaceToBeWritten.name);
  for (const interfaceToBeWritten of interfacesToBeWritten) {
    for (const customType of interfaceToBeWritten.customTypes) {
      if (!allCurentFileInterfaceNames.includes(customType)) {
        allExternalTypes.push(customType);
      }
    }
  }
  externalTypes.push(...new Set(allExternalTypes));
  const typeImports: string = externalTypes.length == 0 ? '' : `import { ${externalTypes.join(',\n')} } from '.';\n\n`;

  const fileContent = `${settings.fileHeader}\n\n${typeImports}${interfaceContent.join('\n\n').concat('\n')}`;

  fs.writeFileSync(Path.join(settings.interfaceDirectory, `${typeFileName}.ts`), fileContent);

  return typeFileName;
};

/**
 * Write index.ts file
 * @param settings Settings Object
 * @param fileNamesToExport list of file names that will be added to the index.ts file
 */
export const writeIndexFile = (settings: Settings, fileNamesToExport: string[]): void => {
  const exportLines = fileNamesToExport.map(fileName => `export * from './${fileName}';`);
  const fileContent = `${settings.fileHeader}\n\n${exportLines.join('\n').concat('\n')}`;
  fs.writeFileSync(Path.join(settings.interfaceDirectory, 'index.ts'), fileContent);
};

/**
 * Create interfaces from schemas from a directory
 * @param settings Settings
 */
export const convertFromDirectory = async (settings: Partial<Settings>): Promise<boolean> => {
  const appSettings = defaultSettings(settings);

  // Check and resolve directories
  appSettings.schemaDirectory = Path.resolve(appSettings.schemaDirectory);
  if (!fs.existsSync(appSettings.schemaDirectory)) {
    throw `schemaDirectory "${appSettings.schemaDirectory}" does not exist`;
  }
  appSettings.interfaceDirectory = Path.resolve(appSettings.interfaceDirectory);
  if (!fs.existsSync(appSettings.interfaceDirectory)) {
    fs.mkdirSync(appSettings.interfaceDirectory);
    if (!fs.existsSync(appSettings.interfaceDirectory)) {
      throw `interfaceDirectory "${appSettings.interfaceDirectory}" does not exist`;
    }
  }

  const fileNamesToExport: string[] = [];

  // Load files and get all interface records
  const files = fs.readdirSync(appSettings.schemaDirectory);
  for (const schemaFileName of files) {
    const typeFileName = await writeInterfaceFile(appSettings, schemaFileName);
    if (typeFileName) {
      fileNamesToExport.push(typeFileName);
    }
  }

  // Write index.ts
  writeIndexFile(appSettings, fileNamesToExport);

  return true;
};

import { existsSync, readFileSync } from 'fs';
import { convertFromDirectory } from '../..';

describe('test the use of .label()', () => {
  const typeOutputDirectory = './src/__tests__/label/interfaces';
  const schemaDirectory = './src/__tests__/label/schemas';

  // beforeEach(() => {
  //   rmdirSync(typeOutputDirectory, { recursive: true });
  // });

  test('generate label interfaces', async () => {
    const result = await convertFromDirectory({
      schemaDirectory,
      typeOutputDirectory
    });

    expect(result).toBe(true);

    expect(existsSync(`${typeOutputDirectory}/index.ts`)).toBeTruthy();
  });

  test('no label', () => {
    const oneContent = readFileSync(`${typeOutputDirectory}/NoLabelTest.ts`).toString();

    expect(oneContent).toBe(
      `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export interface nolabeltest {
  name?: string;
}
`
    );
  });

  test('no label but schame name', () => {
    const oneContent = readFileSync(`${typeOutputDirectory}/NoLabel.ts`).toString();

    expect(oneContent).toBe(
      `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export interface nolabel {
  name?: string;
}
`
    );
  });

  test('label', () => {
    const oneContent = readFileSync(`${typeOutputDirectory}/Label.ts`).toString();

    expect(oneContent).toBe(
      `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export interface Frank {
  name?: string;
}
`
    );
  });
});
